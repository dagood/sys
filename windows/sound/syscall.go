// Code generated by a command; DO NOT EDIT.

// Package windowsgenerated contains Windows system calls. The calls are based on parsing Windows.Win32.winmd.
package sound

import (
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

type Guid windows.GUID

// APIs for Windows.Win32.Media.Audio
//sys	CoRegisterMessageFilter(lpMessageFilter *IMessageFilter, lplpMessageFilter **IMessageFilter) (r HRESULT) = ole32.CoRegisterMessageFilter
//sys	SndPlaySoundA(pszSound *PSTRElement, fuSound uint32) (r BOOL) = winmm.sndPlaySoundA
//sys	SndPlaySoundW(pszSound *PWSTRElement, fuSound uint32) (r BOOL) = winmm.sndPlaySoundW
//sys	PlaySoundA(pszSound *PSTRElement, hmod HINSTANCE, fdwSound SND_FLAGS) (r BOOL) = winmm.PlaySoundA
//sys	PlaySoundW(pszSound *PWSTRElement, hmod HINSTANCE, fdwSound SND_FLAGS) (r BOOL) = winmm.PlaySoundW
//sys	WaveOutGetNumDevs() (r uint32) = winmm.waveOutGetNumDevs
//sys	WaveOutGetDevCapsA(uDeviceID uintptr, pwoc *WAVEOUTCAPSA, cbwoc uint32) (r uint32) = winmm.waveOutGetDevCapsA
//sys	WaveOutGetDevCapsW(uDeviceID uintptr, pwoc *WAVEOUTCAPSW, cbwoc uint32) (r uint32) = winmm.waveOutGetDevCapsW
//sys	WaveOutGetVolume(hwo HWAVEOUT, pdwVolume *uint32) (r uint32) = winmm.waveOutGetVolume
//sys	WaveOutSetVolume(hwo HWAVEOUT, dwVolume uint32) (r uint32) = winmm.waveOutSetVolume
//sys	WaveOutGetErrorTextA(mmrError uint32, pszText *PSTRElement, cchText uint32) (r uint32) = winmm.waveOutGetErrorTextA
//sys	WaveOutGetErrorTextW(mmrError uint32, pszText *PWSTRElement, cchText uint32) (r uint32) = winmm.waveOutGetErrorTextW
//sys	WaveOutOpen(phwo *HWAVEOUT, uDeviceID uint32, pwfx *WAVEFORMATEX, dwCallback uintptr, dwInstance uintptr, fdwOpen MIDI_WAVE_OPEN_TYPE) (r uint32) = winmm.waveOutOpen
//sys	WaveOutClose(hwo HWAVEOUT) (r uint32) = winmm.waveOutClose
//sys	WaveOutPrepareHeader(hwo HWAVEOUT, pwh *WAVEHDR, cbwh uint32) (r uint32) = winmm.waveOutPrepareHeader
//sys	WaveOutUnprepareHeader(hwo HWAVEOUT, pwh *WAVEHDR, cbwh uint32) (r uint32) = winmm.waveOutUnprepareHeader
//sys	WaveOutWrite(hwo HWAVEOUT, pwh *WAVEHDR, cbwh uint32) (r uint32) = winmm.waveOutWrite
//sys	WaveOutPause(hwo HWAVEOUT) (r uint32) = winmm.waveOutPause
//sys	WaveOutRestart(hwo HWAVEOUT) (r uint32) = winmm.waveOutRestart
//sys	WaveOutReset(hwo HWAVEOUT) (r uint32) = winmm.waveOutReset
//sys	WaveOutBreakLoop(hwo HWAVEOUT) (r uint32) = winmm.waveOutBreakLoop
//sys	WaveOutGetPosition(hwo HWAVEOUT, pmmt *MMTIME, cbmmt uint32) (r uint32) = winmm.waveOutGetPosition
//sys	WaveOutGetPitch(hwo HWAVEOUT, pdwPitch *uint32) (r uint32) = winmm.waveOutGetPitch
//sys	WaveOutSetPitch(hwo HWAVEOUT, dwPitch uint32) (r uint32) = winmm.waveOutSetPitch
//sys	WaveOutGetPlaybackRate(hwo HWAVEOUT, pdwRate *uint32) (r uint32) = winmm.waveOutGetPlaybackRate
//sys	WaveOutSetPlaybackRate(hwo HWAVEOUT, dwRate uint32) (r uint32) = winmm.waveOutSetPlaybackRate
//sys	WaveOutGetID(hwo HWAVEOUT, puDeviceID *uint32) (r uint32) = winmm.waveOutGetID
//sys	WaveOutMessage(hwo HWAVEOUT, uMsg uint32, dw1 uintptr, dw2 uintptr) (r uint32) = winmm.waveOutMessage
//sys	WaveInGetNumDevs() (r uint32) = winmm.waveInGetNumDevs
//sys	WaveInGetDevCapsA(uDeviceID uintptr, pwic *WAVEINCAPSA, cbwic uint32) (r uint32) = winmm.waveInGetDevCapsA
//sys	WaveInGetDevCapsW(uDeviceID uintptr, pwic *WAVEINCAPSW, cbwic uint32) (r uint32) = winmm.waveInGetDevCapsW
//sys	WaveInGetErrorTextA(mmrError uint32, pszText *PSTRElement, cchText uint32) (r uint32) = winmm.waveInGetErrorTextA
//sys	WaveInGetErrorTextW(mmrError uint32, pszText *PWSTRElement, cchText uint32) (r uint32) = winmm.waveInGetErrorTextW
//sys	WaveInOpen(phwi *HWAVEIN, uDeviceID uint32, pwfx *WAVEFORMATEX, dwCallback uintptr, dwInstance uintptr, fdwOpen MIDI_WAVE_OPEN_TYPE) (r uint32) = winmm.waveInOpen
//sys	WaveInClose(hwi HWAVEIN) (r uint32) = winmm.waveInClose
//sys	WaveInPrepareHeader(hwi HWAVEIN, pwh *WAVEHDR, cbwh uint32) (r uint32) = winmm.waveInPrepareHeader
//sys	WaveInUnprepareHeader(hwi HWAVEIN, pwh *WAVEHDR, cbwh uint32) (r uint32) = winmm.waveInUnprepareHeader
//sys	WaveInAddBuffer(hwi HWAVEIN, pwh *WAVEHDR, cbwh uint32) (r uint32) = winmm.waveInAddBuffer
//sys	WaveInStart(hwi HWAVEIN) (r uint32) = winmm.waveInStart
//sys	WaveInStop(hwi HWAVEIN) (r uint32) = winmm.waveInStop
//sys	WaveInReset(hwi HWAVEIN) (r uint32) = winmm.waveInReset
//sys	WaveInGetPosition(hwi HWAVEIN, pmmt *MMTIME, cbmmt uint32) (r uint32) = winmm.waveInGetPosition
//sys	WaveInGetID(hwi HWAVEIN, puDeviceID *uint32) (r uint32) = winmm.waveInGetID
//sys	WaveInMessage(hwi HWAVEIN, uMsg uint32, dw1 uintptr, dw2 uintptr) (r uint32) = winmm.waveInMessage
//sys	MidiOutGetNumDevs() (r uint32) = winmm.midiOutGetNumDevs
//sys	MidiStreamOpen(phms *HMIDISTRM, puDeviceID *uint32, cMidi uint32, dwCallback uintptr, dwInstance uintptr, fdwOpen uint32) (r uint32) = winmm.midiStreamOpen
//sys	MidiStreamClose(hms HMIDISTRM) (r uint32) = winmm.midiStreamClose
//sys	MidiStreamProperty(hms HMIDISTRM, lppropdata *uint8, dwProperty uint32) (r uint32) = winmm.midiStreamProperty
//sys	MidiStreamPosition(hms HMIDISTRM, lpmmt *MMTIME, cbmmt uint32) (r uint32) = winmm.midiStreamPosition
//sys	MidiStreamOut(hms HMIDISTRM, pmh *MIDIHDR, cbmh uint32) (r uint32) = winmm.midiStreamOut
//sys	MidiStreamPause(hms HMIDISTRM) (r uint32) = winmm.midiStreamPause
//sys	MidiStreamRestart(hms HMIDISTRM) (r uint32) = winmm.midiStreamRestart
//sys	MidiStreamStop(hms HMIDISTRM) (r uint32) = winmm.midiStreamStop
//sys	MidiConnect(hmi HMIDI, hmo HMIDIOUT, pReserved unsafe.Pointer) (r uint32) = winmm.midiConnect
//sys	MidiDisconnect(hmi HMIDI, hmo HMIDIOUT, pReserved unsafe.Pointer) (r uint32) = winmm.midiDisconnect
//sys	MidiOutGetDevCapsA(uDeviceID uintptr, pmoc *MIDIOUTCAPSA, cbmoc uint32) (r uint32) = winmm.midiOutGetDevCapsA
//sys	MidiOutGetDevCapsW(uDeviceID uintptr, pmoc *MIDIOUTCAPSW, cbmoc uint32) (r uint32) = winmm.midiOutGetDevCapsW
//sys	MidiOutGetVolume(hmo HMIDIOUT, pdwVolume *uint32) (r uint32) = winmm.midiOutGetVolume
//sys	MidiOutSetVolume(hmo HMIDIOUT, dwVolume uint32) (r uint32) = winmm.midiOutSetVolume
//sys	MidiOutGetErrorTextA(mmrError uint32, pszText *PSTRElement, cchText uint32) (r uint32) = winmm.midiOutGetErrorTextA
//sys	MidiOutGetErrorTextW(mmrError uint32, pszText *PWSTRElement, cchText uint32) (r uint32) = winmm.midiOutGetErrorTextW
//sys	MidiOutOpen(phmo *HMIDIOUT, uDeviceID uint32, dwCallback uintptr, dwInstance uintptr, fdwOpen MIDI_WAVE_OPEN_TYPE) (r uint32) = winmm.midiOutOpen
//sys	MidiOutClose(hmo HMIDIOUT) (r uint32) = winmm.midiOutClose
//sys	MidiOutPrepareHeader(hmo HMIDIOUT, pmh *MIDIHDR, cbmh uint32) (r uint32) = winmm.midiOutPrepareHeader
//sys	MidiOutUnprepareHeader(hmo HMIDIOUT, pmh *MIDIHDR, cbmh uint32) (r uint32) = winmm.midiOutUnprepareHeader
//sys	MidiOutShortMsg(hmo HMIDIOUT, dwMsg uint32) (r uint32) = winmm.midiOutShortMsg
//sys	MidiOutLongMsg(hmo HMIDIOUT, pmh *MIDIHDR, cbmh uint32) (r uint32) = winmm.midiOutLongMsg
//sys	MidiOutReset(hmo HMIDIOUT) (r uint32) = winmm.midiOutReset
//sys	MidiOutCachePatches(hmo HMIDIOUT, uBank uint32, pwpa *uint16, fuCache uint32) (r uint32) = winmm.midiOutCachePatches
//sys	MidiOutCacheDrumPatches(hmo HMIDIOUT, uPatch uint32, pwkya *uint16, fuCache uint32) (r uint32) = winmm.midiOutCacheDrumPatches
//sys	MidiOutGetID(hmo HMIDIOUT, puDeviceID *uint32) (r uint32) = winmm.midiOutGetID
//sys	MidiOutMessage(hmo HMIDIOUT, uMsg uint32, dw1 uintptr, dw2 uintptr) (r uint32) = winmm.midiOutMessage
//sys	MidiInGetNumDevs() (r uint32) = winmm.midiInGetNumDevs
//sys	MidiInGetDevCapsA(uDeviceID uintptr, pmic *MIDIINCAPSA, cbmic uint32) (r uint32) = winmm.midiInGetDevCapsA
//sys	MidiInGetDevCapsW(uDeviceID uintptr, pmic *MIDIINCAPSW, cbmic uint32) (r uint32) = winmm.midiInGetDevCapsW
//sys	MidiInGetErrorTextA(mmrError uint32, pszText *PSTRElement, cchText uint32) (r uint32) = winmm.midiInGetErrorTextA
//sys	MidiInGetErrorTextW(mmrError uint32, pszText *PWSTRElement, cchText uint32) (r uint32) = winmm.midiInGetErrorTextW
//sys	MidiInOpen(phmi *HMIDIIN, uDeviceID uint32, dwCallback uintptr, dwInstance uintptr, fdwOpen MIDI_WAVE_OPEN_TYPE) (r uint32) = winmm.midiInOpen
//sys	MidiInClose(hmi HMIDIIN) (r uint32) = winmm.midiInClose
//sys	MidiInPrepareHeader(hmi HMIDIIN, pmh *MIDIHDR, cbmh uint32) (r uint32) = winmm.midiInPrepareHeader
//sys	MidiInUnprepareHeader(hmi HMIDIIN, pmh *MIDIHDR, cbmh uint32) (r uint32) = winmm.midiInUnprepareHeader
//sys	MidiInAddBuffer(hmi HMIDIIN, pmh *MIDIHDR, cbmh uint32) (r uint32) = winmm.midiInAddBuffer
//sys	MidiInStart(hmi HMIDIIN) (r uint32) = winmm.midiInStart
//sys	MidiInStop(hmi HMIDIIN) (r uint32) = winmm.midiInStop
//sys	MidiInReset(hmi HMIDIIN) (r uint32) = winmm.midiInReset
//sys	MidiInGetID(hmi HMIDIIN, puDeviceID *uint32) (r uint32) = winmm.midiInGetID
//sys	MidiInMessage(hmi HMIDIIN, uMsg uint32, dw1 uintptr, dw2 uintptr) (r uint32) = winmm.midiInMessage
//sys	AuxGetNumDevs() (r uint32) = winmm.auxGetNumDevs
//sys	AuxGetDevCapsA(uDeviceID uintptr, pac *AUXCAPSA, cbac uint32) (r uint32) = winmm.auxGetDevCapsA
//sys	AuxGetDevCapsW(uDeviceID uintptr, pac *AUXCAPSW, cbac uint32) (r uint32) = winmm.auxGetDevCapsW
//sys	AuxSetVolume(uDeviceID uint32, dwVolume uint32) (r uint32) = winmm.auxSetVolume
//sys	AuxGetVolume(uDeviceID uint32, pdwVolume *uint32) (r uint32) = winmm.auxGetVolume
//sys	AuxOutMessage(uDeviceID uint32, uMsg uint32, dw1 uintptr, dw2 uintptr) (r uint32) = winmm.auxOutMessage
//sys	MixerGetNumDevs() (r uint32) = winmm.mixerGetNumDevs
//sys	MixerGetDevCapsA(uMxId uintptr, pmxcaps *MIXERCAPSA, cbmxcaps uint32) (r uint32) = winmm.mixerGetDevCapsA
//sys	MixerGetDevCapsW(uMxId uintptr, pmxcaps *MIXERCAPSW, cbmxcaps uint32) (r uint32) = winmm.mixerGetDevCapsW
//sys	MixerOpen(phmx *uintptr, uMxId uint32, dwCallback uintptr, dwInstance uintptr, fdwOpen uint32) (r uint32) = winmm.mixerOpen
//sys	MixerClose(hmx HMIXER) (r uint32) = winmm.mixerClose
//sys	MixerMessage(hmx HMIXER, uMsg uint32, dwParam1 uintptr, dwParam2 uintptr) (r uint32) = winmm.mixerMessage
//sys	MixerGetLineInfoA(hmxobj HMIXEROBJ, pmxl *MIXERLINEA, fdwInfo uint32) (r uint32) = winmm.mixerGetLineInfoA
//sys	MixerGetLineInfoW(hmxobj HMIXEROBJ, pmxl *MIXERLINEW, fdwInfo uint32) (r uint32) = winmm.mixerGetLineInfoW
//sys	MixerGetID(hmxobj HMIXEROBJ, puMxId *uint32, fdwId uint32) (r uint32) = winmm.mixerGetID
//sys	MixerGetLineControlsA(hmxobj HMIXEROBJ, pmxlc *MIXERLINECONTROLSA, fdwControls uint32) (r uint32) = winmm.mixerGetLineControlsA
//sys	MixerGetLineControlsW(hmxobj HMIXEROBJ, pmxlc *MIXERLINECONTROLSW, fdwControls uint32) (r uint32) = winmm.mixerGetLineControlsW
//sys	MixerGetControlDetailsA(hmxobj HMIXEROBJ, pmxcd *MIXERCONTROLDETAILS, fdwDetails uint32) (r uint32) = winmm.mixerGetControlDetailsA
//sys	MixerGetControlDetailsW(hmxobj HMIXEROBJ, pmxcd *MIXERCONTROLDETAILS, fdwDetails uint32) (r uint32) = winmm.mixerGetControlDetailsW
//sys	MixerSetControlDetails(hmxobj HMIXEROBJ, pmxcd *MIXERCONTROLDETAILS, fdwDetails uint32) (r uint32) = winmm.mixerSetControlDetails
//sys	ActivateAudioInterfaceAsync(deviceInterfacePath *PWSTRElement, riid *Guid, activationParams *PROPVARIANT, completionHandler *IActivateAudioInterfaceCompletionHandler, activationOperation **IActivateAudioInterfaceAsyncOperation) (r HRESULT) = mmdevapi.ActivateAudioInterfaceAsync
//sys	CreateRenderAudioStateMonitor(audioStateMonitor **IAudioStateMonitor) (r HRESULT) = windows.media.mediacontrol.CreateRenderAudioStateMonitor
//sys	CreateRenderAudioStateMonitorForCategory(category AUDIO_STREAM_CATEGORY, audioStateMonitor **IAudioStateMonitor) (r HRESULT) = windows.media.mediacontrol.CreateRenderAudioStateMonitorForCategory
//sys	CreateRenderAudioStateMonitorForCategoryAndDeviceRole(category AUDIO_STREAM_CATEGORY, role ERole, audioStateMonitor **IAudioStateMonitor) (r HRESULT) = windows.media.mediacontrol.CreateRenderAudioStateMonitorForCategoryAndDeviceRole
//sys	CreateRenderAudioStateMonitorForCategoryAndDeviceId(category AUDIO_STREAM_CATEGORY, deviceId *PWSTRElement, audioStateMonitor **IAudioStateMonitor) (r HRESULT) = windows.media.mediacontrol.CreateRenderAudioStateMonitorForCategoryAndDeviceId
//sys	CreateCaptureAudioStateMonitor(audioStateMonitor **IAudioStateMonitor) (r HRESULT) = windows.media.mediacontrol.CreateCaptureAudioStateMonitor
//sys	CreateCaptureAudioStateMonitorForCategory(category AUDIO_STREAM_CATEGORY, audioStateMonitor **IAudioStateMonitor) (r HRESULT) = windows.media.mediacontrol.CreateCaptureAudioStateMonitorForCategory
//sys	CreateCaptureAudioStateMonitorForCategoryAndDeviceRole(category AUDIO_STREAM_CATEGORY, role ERole, audioStateMonitor **IAudioStateMonitor) (r HRESULT) = windows.media.mediacontrol.CreateCaptureAudioStateMonitorForCategoryAndDeviceRole
//sys	CreateCaptureAudioStateMonitorForCategoryAndDeviceId(category AUDIO_STREAM_CATEGORY, deviceId *PWSTRElement, audioStateMonitor **IAudioStateMonitor) (r HRESULT) = windows.media.mediacontrol.CreateCaptureAudioStateMonitorForCategoryAndDeviceId
//sys	AcmGetVersion() (r uint32) = msacm32.acmGetVersion
//sys	AcmMetrics(hao HACMOBJ, uMetric uint32, pMetric unsafe.Pointer) (r uint32) = msacm32.acmMetrics
//sys	AcmDriverEnum(fnCallback ACMDRIVERENUMCB, dwInstance uintptr, fdwEnum uint32) (r uint32) = msacm32.acmDriverEnum
//sys	AcmDriverID(hao HACMOBJ, phadid *uintptr, fdwDriverID uint32) (r uint32) = msacm32.acmDriverID
//sys	AcmDriverAddA(phadid *uintptr, hinstModule HINSTANCE, lParam LPARAM, dwPriority uint32, fdwAdd uint32) (r uint32) = msacm32.acmDriverAddA
//sys	AcmDriverAddW(phadid *uintptr, hinstModule HINSTANCE, lParam LPARAM, dwPriority uint32, fdwAdd uint32) (r uint32) = msacm32.acmDriverAddW
//sys	AcmDriverRemove(hadid HACMDRIVERID, fdwRemove uint32) (r uint32) = msacm32.acmDriverRemove
//sys	AcmDriverOpen(phad *uintptr, hadid HACMDRIVERID, fdwOpen uint32) (r uint32) = msacm32.acmDriverOpen
//sys	AcmDriverClose(had HACMDRIVER, fdwClose uint32) (r uint32) = msacm32.acmDriverClose
//sys	AcmDriverMessage(had HACMDRIVER, uMsg uint32, lParam1 LPARAM, lParam2 LPARAM) (r LRESULT) = msacm32.acmDriverMessage
//sys	AcmDriverPriority(hadid HACMDRIVERID, dwPriority uint32, fdwPriority uint32) (r uint32) = msacm32.acmDriverPriority
//sys	AcmDriverDetailsA(hadid HACMDRIVERID, padd *ACMDRIVERDETAILSA, fdwDetails uint32) (r uint32) = msacm32.acmDriverDetailsA
//sys	AcmDriverDetailsW(hadid HACMDRIVERID, padd *ACMDRIVERDETAILSW, fdwDetails uint32) (r uint32) = msacm32.acmDriverDetailsW
//sys	AcmFormatTagDetailsA(had HACMDRIVER, paftd *ACMFORMATTAGDETAILSA, fdwDetails uint32) (r uint32) = msacm32.acmFormatTagDetailsA
//sys	AcmFormatTagDetailsW(had HACMDRIVER, paftd *ACMFORMATTAGDETAILSW, fdwDetails uint32) (r uint32) = msacm32.acmFormatTagDetailsW
//sys	AcmFormatTagEnumA(had HACMDRIVER, paftd *ACMFORMATTAGDETAILSA, fnCallback ACMFORMATTAGENUMCBA, dwInstance uintptr, fdwEnum uint32) (r uint32) = msacm32.acmFormatTagEnumA
//sys	AcmFormatTagEnumW(had HACMDRIVER, paftd *ACMFORMATTAGDETAILSW, fnCallback ACMFORMATTAGENUMCBW, dwInstance uintptr, fdwEnum uint32) (r uint32) = msacm32.acmFormatTagEnumW
//sys	AcmFormatDetailsA(had HACMDRIVER, pafd *ACMFORMATDETAILSA, fdwDetails uint32) (r uint32) = msacm32.acmFormatDetailsA
//sys	AcmFormatDetailsW(had HACMDRIVER, pafd *TACMFORMATDETAILSW, fdwDetails uint32) (r uint32) = msacm32.acmFormatDetailsW
//sys	AcmFormatEnumA(had HACMDRIVER, pafd *ACMFORMATDETAILSA, fnCallback ACMFORMATENUMCBA, dwInstance uintptr, fdwEnum uint32) (r uint32) = msacm32.acmFormatEnumA
//sys	AcmFormatEnumW(had HACMDRIVER, pafd *TACMFORMATDETAILSW, fnCallback ACMFORMATENUMCBW, dwInstance uintptr, fdwEnum uint32) (r uint32) = msacm32.acmFormatEnumW
//sys	AcmFormatSuggest(had HACMDRIVER, pwfxSrc *WAVEFORMATEX, pwfxDst *WAVEFORMATEX, cbwfxDst uint32, fdwSuggest uint32) (r uint32) = msacm32.acmFormatSuggest
//sys	AcmFormatChooseA(pafmtc *ACMFORMATCHOOSEA) (r uint32) = msacm32.acmFormatChooseA
//sys	AcmFormatChooseW(pafmtc *ACMFORMATCHOOSEW) (r uint32) = msacm32.acmFormatChooseW
//sys	AcmFilterTagDetailsA(had HACMDRIVER, paftd *ACMFILTERTAGDETAILSA, fdwDetails uint32) (r uint32) = msacm32.acmFilterTagDetailsA
//sys	AcmFilterTagDetailsW(had HACMDRIVER, paftd *ACMFILTERTAGDETAILSW, fdwDetails uint32) (r uint32) = msacm32.acmFilterTagDetailsW
//sys	AcmFilterTagEnumA(had HACMDRIVER, paftd *ACMFILTERTAGDETAILSA, fnCallback ACMFILTERTAGENUMCBA, dwInstance uintptr, fdwEnum uint32) (r uint32) = msacm32.acmFilterTagEnumA
//sys	AcmFilterTagEnumW(had HACMDRIVER, paftd *ACMFILTERTAGDETAILSW, fnCallback ACMFILTERTAGENUMCBW, dwInstance uintptr, fdwEnum uint32) (r uint32) = msacm32.acmFilterTagEnumW
//sys	AcmFilterDetailsA(had HACMDRIVER, pafd *ACMFILTERDETAILSA, fdwDetails uint32) (r uint32) = msacm32.acmFilterDetailsA
//sys	AcmFilterDetailsW(had HACMDRIVER, pafd *ACMFILTERDETAILSW, fdwDetails uint32) (r uint32) = msacm32.acmFilterDetailsW
//sys	AcmFilterEnumA(had HACMDRIVER, pafd *ACMFILTERDETAILSA, fnCallback ACMFILTERENUMCBA, dwInstance uintptr, fdwEnum uint32) (r uint32) = msacm32.acmFilterEnumA
//sys	AcmFilterEnumW(had HACMDRIVER, pafd *ACMFILTERDETAILSW, fnCallback ACMFILTERENUMCBW, dwInstance uintptr, fdwEnum uint32) (r uint32) = msacm32.acmFilterEnumW
//sys	AcmFilterChooseA(pafltrc *ACMFILTERCHOOSEA) (r uint32) = msacm32.acmFilterChooseA
//sys	AcmFilterChooseW(pafltrc *ACMFILTERCHOOSEW) (r uint32) = msacm32.acmFilterChooseW
//sys	AcmStreamOpen(phas *uintptr, had HACMDRIVER, pwfxSrc *WAVEFORMATEX, pwfxDst *WAVEFORMATEX, pwfltr *WAVEFILTER, dwCallback uintptr, dwInstance uintptr, fdwOpen uint32) (r uint32) = msacm32.acmStreamOpen
//sys	AcmStreamClose(has HACMSTREAM, fdwClose uint32) (r uint32) = msacm32.acmStreamClose
//sys	AcmStreamSize(has HACMSTREAM, cbInput uint32, pdwOutputBytes *uint32, fdwSize uint32) (r uint32) = msacm32.acmStreamSize
//sys	AcmStreamReset(has HACMSTREAM, fdwReset uint32) (r uint32) = msacm32.acmStreamReset
//sys	AcmStreamMessage(has HACMSTREAM, uMsg uint32, lParam1 LPARAM, lParam2 LPARAM) (r uint32) = msacm32.acmStreamMessage
//sys	AcmStreamConvert(has HACMSTREAM, pash *ACMSTREAMHEADER, fdwConvert uint32) (r uint32) = msacm32.acmStreamConvert
//sys	AcmStreamPrepareHeader(has HACMSTREAM, pash *ACMSTREAMHEADER, fdwPrepare uint32) (r uint32) = msacm32.acmStreamPrepareHeader
//sys	AcmStreamUnprepareHeader(has HACMSTREAM, pash *ACMSTREAMHEADER, fdwUnprepare uint32) (r uint32) = msacm32.acmStreamUnprepareHeader

// Types used in generated APIs

type MIDI_WAVE_OPEN_TYPE uint32

const (
	MIDI_WAVE_OPEN_TYPE_CALLBACK_TYPEMASK                        MIDI_WAVE_OPEN_TYPE = 0x70000
	MIDI_WAVE_OPEN_TYPE_CALLBACK_NULL                            MIDI_WAVE_OPEN_TYPE = 0x0
	MIDI_WAVE_OPEN_TYPE_CALLBACK_WINDOW                          MIDI_WAVE_OPEN_TYPE = 0x10000
	MIDI_WAVE_OPEN_TYPE_CALLBACK_TASK                            MIDI_WAVE_OPEN_TYPE = 0x20000
	MIDI_WAVE_OPEN_TYPE_CALLBACK_FUNCTION                        MIDI_WAVE_OPEN_TYPE = 0x30000
	MIDI_WAVE_OPEN_TYPE_CALLBACK_THREAD                          MIDI_WAVE_OPEN_TYPE = 0x20000
	MIDI_WAVE_OPEN_TYPE_CALLBACK_EVENT                           MIDI_WAVE_OPEN_TYPE = 0x50000
	MIDI_WAVE_OPEN_TYPE_WAVE_FORMAT_QUERY                        MIDI_WAVE_OPEN_TYPE = 0x1
	MIDI_WAVE_OPEN_TYPE_WAVE_ALLOWSYNC                           MIDI_WAVE_OPEN_TYPE = 0x2
	MIDI_WAVE_OPEN_TYPE_WAVE_MAPPED                              MIDI_WAVE_OPEN_TYPE = 0x4
	MIDI_WAVE_OPEN_TYPE_WAVE_FORMAT_DIRECT                       MIDI_WAVE_OPEN_TYPE = 0x8
	MIDI_WAVE_OPEN_TYPE_WAVE_FORMAT_DIRECT_QUERY                 MIDI_WAVE_OPEN_TYPE = 0x9
	MIDI_WAVE_OPEN_TYPE_WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE MIDI_WAVE_OPEN_TYPE = 0x10
	MIDI_WAVE_OPEN_TYPE_MIDI_IO_STATUS                           MIDI_WAVE_OPEN_TYPE = 0x20
)

type SND_FLAGS uint32

const (
	SND_FLAGS_SND_APPLICATION SND_FLAGS = 0x80
	SND_FLAGS_SND_ALIAS       SND_FLAGS = 0x10000
	SND_FLAGS_SND_ALIAS_ID    SND_FLAGS = 0x110000
	SND_FLAGS_SND_FILENAME    SND_FLAGS = 0x20000
	SND_FLAGS_SND_RESOURCE    SND_FLAGS = 0x40004
	SND_FLAGS_SND_ASYNC       SND_FLAGS = 0x1
	SND_FLAGS_SND_NODEFAULT   SND_FLAGS = 0x2
	SND_FLAGS_SND_LOOP        SND_FLAGS = 0x8
	SND_FLAGS_SND_MEMORY      SND_FLAGS = 0x4
	SND_FLAGS_SND_NOSTOP      SND_FLAGS = 0x10
	SND_FLAGS_SND_NOWAIT      SND_FLAGS = 0x2000
	SND_FLAGS_SND_PURGE       SND_FLAGS = 0x40
	SND_FLAGS_SND_SENTRY      SND_FLAGS = 0x80000
	SND_FLAGS_SND_SYNC        SND_FLAGS = 0x0
	SND_FLAGS_SND_SYSTEM      SND_FLAGS = 0x200000
)

type BOOL int32

type HINSTANCE uintptr

type HRESULT int32

type LPARAM uintptr

type LRESULT uintptr

type PSTRElement uint8

type PWSTRElement uint16

type HMIDI uintptr

type HMIDIIN uintptr

type HMIDIOUT uintptr

type HMIDISTRM uintptr

type HMIXER uintptr

type HMIXEROBJ uintptr

type HWAVEOUT uintptr

type HWAVEIN uintptr

type HACMDRIVERID uintptr

type HACMDRIVER uintptr

type HACMSTREAM uintptr

type HACMOBJ uintptr

// Interface type is likely missing members. Not yet implemented in go-winmd.
type IMessageFilter struct {
}

type PROPVARIANT struct {
	Vt         uint16
	WReserved1 uint16
	WReserved2 uint16
	WReserved3 uint16
	CVal       CHAR
}

type MMTIME struct {
	WType uint32
	Ms    uint32
}

type WAVEFILTER struct {
	CbStruct    uint32
	DwFilterTag uint32
	FdwFilter   uint32
	DwReserved  []uint32
}

type WAVEHDR struct {
	LpData          *PSTRElement
	DwBufferLength  uint32
	DwBytesRecorded uint32
	DwUser          uintptr
	DwFlags         uint32
	DwLoops         uint32
	LpNext          *WAVEHDR
	Reserved        uintptr
}

type WAVEOUTCAPSA struct {
	WMid           uint16
	WPid           uint16
	VDriverVersion uint32
	SzPname        []CHAR
	DwFormats      uint32
	WChannels      uint16
	WReserved1     uint16
	DwSupport      uint32
}

type WAVEOUTCAPSW struct {
	WMid           uint16
	WPid           uint16
	VDriverVersion uint32
	SzPname        []uint16
	DwFormats      uint32
	WChannels      uint16
	WReserved1     uint16
	DwSupport      uint32
}

type WAVEINCAPSA struct {
	WMid           uint16
	WPid           uint16
	VDriverVersion uint32
	SzPname        []CHAR
	DwFormats      uint32
	WChannels      uint16
	WReserved1     uint16
}

type WAVEINCAPSW struct {
	WMid           uint16
	WPid           uint16
	VDriverVersion uint32
	SzPname        []uint16
	DwFormats      uint32
	WChannels      uint16
	WReserved1     uint16
}

type WAVEFORMATEX struct {
	WFormatTag      uint16
	NChannels       uint16
	NSamplesPerSec  uint32
	NAvgBytesPerSec uint32
	NBlockAlign     uint16
	WBitsPerSample  uint16
	CbSize          uint16
}

type MIDIOUTCAPSA struct {
	WMid           uint16
	WPid           uint16
	VDriverVersion uint32
	SzPname        []CHAR
	WTechnology    uint16
	WVoices        uint16
	WNotes         uint16
	WChannelMask   uint16
	DwSupport      uint32
}

type MIDIOUTCAPSW struct {
	WMid           uint16
	WPid           uint16
	VDriverVersion uint32
	SzPname        []uint16
	WTechnology    uint16
	WVoices        uint16
	WNotes         uint16
	WChannelMask   uint16
	DwSupport      uint32
}

type MIDIINCAPSA struct {
	WMid           uint16
	WPid           uint16
	VDriverVersion uint32
	SzPname        []CHAR
	DwSupport      uint32
}

type MIDIINCAPSW struct {
	WMid           uint16
	WPid           uint16
	VDriverVersion uint32
	SzPname        []uint16
	DwSupport      uint32
}

type MIDIHDR struct {
	LpData          *PSTRElement
	DwBufferLength  uint32
	DwBytesRecorded uint32
	DwUser          uintptr
	DwFlags         uint32
	LpNext          *MIDIHDR
	Reserved        uintptr
	DwOffset        uint32
	DwReserved      []uintptr
}

type AUXCAPSA struct {
	WMid           uint16
	WPid           uint16
	VDriverVersion uint32
	SzPname        []CHAR
	WTechnology    uint16
	WReserved1     uint16
	DwSupport      uint32
}

type AUXCAPSW struct {
	WMid           uint16
	WPid           uint16
	VDriverVersion uint32
	SzPname        []uint16
	WTechnology    uint16
	WReserved1     uint16
	DwSupport      uint32
}

type MIXERCAPSA struct {
	WMid           uint16
	WPid           uint16
	VDriverVersion uint32
	SzPname        []CHAR
	FdwSupport     uint32
	CDestinations  uint32
}

type MIXERCAPSW struct {
	WMid           uint16
	WPid           uint16
	VDriverVersion uint32
	SzPname        []uint16
	FdwSupport     uint32
	CDestinations  uint32
}

type MIXERLINEA struct {
	CbStruct        uint32
	DwDestination   uint32
	DwSource        uint32
	DwLineID        uint32
	FdwLine         uint32
	DwUser          uintptr
	DwComponentType MIXERLINE_COMPONENTTYPE
	CChannels       uint32
	CConnections    uint32
	CControls       uint32
	SzShortName     []CHAR
	SzName          []CHAR
	DwType          uint32
	DwDeviceID      uint32
	WMid            uint16
	WPid            uint16
	VDriverVersion  uint32
	SzPname         []CHAR
}

type MIXERLINEW struct {
	CbStruct        uint32
	DwDestination   uint32
	DwSource        uint32
	DwLineID        uint32
	FdwLine         uint32
	DwUser          uintptr
	DwComponentType MIXERLINE_COMPONENTTYPE
	CChannels       uint32
	CConnections    uint32
	CControls       uint32
	SzShortName     []uint16
	SzName          []uint16
	DwType          uint32
	DwDeviceID      uint32
	WMid            uint16
	WPid            uint16
	VDriverVersion  uint32
	SzPname         []uint16
}

type MIXERLINECONTROLSA struct {
	CbStruct    uint32
	DwLineID    uint32
	DwControlID uint32
	CControls   uint32
	Cbmxctrl    uint32
	Pamxctrl    *MIXERCONTROLA
}

type MIXERLINECONTROLSW struct {
	CbStruct    uint32
	DwLineID    uint32
	DwControlID uint32
	CControls   uint32
	Cbmxctrl    uint32
	Pamxctrl    *MIXERCONTROLW
}

type MIXERCONTROLDETAILS struct {
	CbStruct    uint32
	DwControlID uint32
	CChannels   uint32
	HwndOwner   HWND
	CbDetails   uint32
	PaDetails   unsafe.Pointer
}

type AUDIO_STREAM_CATEGORY int32

const (
	AUDIO_STREAM_CATEGORY_AudioCategory_Other               AUDIO_STREAM_CATEGORY = 0x0
	AUDIO_STREAM_CATEGORY_AudioCategory_ForegroundOnlyMedia AUDIO_STREAM_CATEGORY = 0x1
	AUDIO_STREAM_CATEGORY_AudioCategory_Communications      AUDIO_STREAM_CATEGORY = 0x3
	AUDIO_STREAM_CATEGORY_AudioCategory_Alerts              AUDIO_STREAM_CATEGORY = 0x4
	AUDIO_STREAM_CATEGORY_AudioCategory_SoundEffects        AUDIO_STREAM_CATEGORY = 0x5
	AUDIO_STREAM_CATEGORY_AudioCategory_GameEffects         AUDIO_STREAM_CATEGORY = 0x6
	AUDIO_STREAM_CATEGORY_AudioCategory_GameMedia           AUDIO_STREAM_CATEGORY = 0x7
	AUDIO_STREAM_CATEGORY_AudioCategory_GameChat            AUDIO_STREAM_CATEGORY = 0x8
	AUDIO_STREAM_CATEGORY_AudioCategory_Speech              AUDIO_STREAM_CATEGORY = 0x9
	AUDIO_STREAM_CATEGORY_AudioCategory_Movie               AUDIO_STREAM_CATEGORY = 0xa
	AUDIO_STREAM_CATEGORY_AudioCategory_Media               AUDIO_STREAM_CATEGORY = 0xb
	AUDIO_STREAM_CATEGORY_AudioCategory_FarFieldSpeech      AUDIO_STREAM_CATEGORY = 0xc
	AUDIO_STREAM_CATEGORY_AudioCategory_UniformSpeech       AUDIO_STREAM_CATEGORY = 0xd
	AUDIO_STREAM_CATEGORY_AudioCategory_VoiceTyping         AUDIO_STREAM_CATEGORY = 0xe
)

type ERole int32

const (
	ERole_EConsole        ERole = 0x0
	ERole_EMultimedia     ERole = 0x1
	ERole_ECommunications ERole = 0x2
	ERole_enum_count      ERole = 0x3
)

// Interface type is likely missing members. Not yet implemented in go-winmd.
type IActivateAudioInterfaceCompletionHandler struct {
}

// Interface type is likely missing members. Not yet implemented in go-winmd.
type IActivateAudioInterfaceAsyncOperation struct {
}

// Interface type is likely missing members. Not yet implemented in go-winmd.
type IAudioStateMonitor struct {
}

type ACMDRIVERENUMCB uintptr

type ACMDRIVERDETAILSA struct {
	CbStruct    uint32
	FccType     uint32
	FccComp     uint32
	WMid        uint16
	WPid        uint16
	VdwACM      uint32
	VdwDriver   uint32
	FdwSupport  uint32
	CFormatTags uint32
	CFilterTags uint32
	Hicon       HICON
	SzShortName []CHAR
	SzLongName  []CHAR
	SzCopyright []CHAR
	SzLicensing []CHAR
	SzFeatures  []CHAR
}

type ACMDRIVERDETAILSW struct {
	CbStruct    uint32
	FccType     uint32
	FccComp     uint32
	WMid        uint16
	WPid        uint16
	VdwACM      uint32
	VdwDriver   uint32
	FdwSupport  uint32
	CFormatTags uint32
	CFilterTags uint32
	Hicon       HICON
	SzShortName []uint16
	SzLongName  []uint16
	SzCopyright []uint16
	SzLicensing []uint16
	SzFeatures  []uint16
}

type ACMFORMATTAGDETAILSA struct {
	CbStruct         uint32
	DwFormatTagIndex uint32
	DwFormatTag      uint32
	CbFormatSize     uint32
	FdwSupport       uint32
	CStandardFormats uint32
	SzFormatTag      []CHAR
}

type ACMFORMATTAGDETAILSW struct {
	CbStruct         uint32
	DwFormatTagIndex uint32
	DwFormatTag      uint32
	CbFormatSize     uint32
	FdwSupport       uint32
	CStandardFormats uint32
	SzFormatTag      []uint16
}

type ACMFORMATTAGENUMCBA uintptr

type ACMFORMATTAGENUMCBW uintptr

type ACMFORMATDETAILSA struct {
	CbStruct      uint32
	DwFormatIndex uint32
	DwFormatTag   uint32
	FdwSupport    uint32
	Pwfx          *WAVEFORMATEX
	Cbwfx         uint32
	SzFormat      []CHAR
}

type TACMFORMATDETAILSW struct {
	CbStruct      uint32
	DwFormatIndex uint32
	DwFormatTag   uint32
	FdwSupport    uint32
	Pwfx          *WAVEFORMATEX
	Cbwfx         uint32
	SzFormat      []uint16
}

type ACMFORMATENUMCBA uintptr

type ACMFORMATENUMCBW uintptr

type ACMFORMATCHOOSEA struct {
	CbStruct        uint32
	FdwStyle        uint32
	HwndOwner       HWND
	Pwfx            *WAVEFORMATEX
	Cbwfx           uint32
	PszTitle        *PSTRElement
	SzFormatTag     []CHAR
	SzFormat        []CHAR
	PszName         *PSTRElement
	CchName         uint32
	FdwEnum         uint32
	PwfxEnum        *WAVEFORMATEX
	HInstance       HINSTANCE
	PszTemplateName *PSTRElement
	LCustData       LPARAM
	PfnHook         ACMFORMATCHOOSEHOOKPROCA
}

type ACMFORMATCHOOSEW struct {
	CbStruct        uint32
	FdwStyle        uint32
	HwndOwner       HWND
	Pwfx            *WAVEFORMATEX
	Cbwfx           uint32
	PszTitle        *PWSTRElement
	SzFormatTag     []uint16
	SzFormat        []uint16
	PszName         *PWSTRElement
	CchName         uint32
	FdwEnum         uint32
	PwfxEnum        *WAVEFORMATEX
	HInstance       HINSTANCE
	PszTemplateName *PWSTRElement
	LCustData       LPARAM
	PfnHook         ACMFORMATCHOOSEHOOKPROCW
}

type ACMFILTERTAGDETAILSA struct {
	CbStruct         uint32
	DwFilterTagIndex uint32
	DwFilterTag      uint32
	CbFilterSize     uint32
	FdwSupport       uint32
	CStandardFilters uint32
	SzFilterTag      []CHAR
}

type ACMFILTERTAGDETAILSW struct {
	CbStruct         uint32
	DwFilterTagIndex uint32
	DwFilterTag      uint32
	CbFilterSize     uint32
	FdwSupport       uint32
	CStandardFilters uint32
	SzFilterTag      []uint16
}

type ACMFILTERTAGENUMCBA uintptr

type ACMFILTERTAGENUMCBW uintptr

type ACMFILTERDETAILSA struct {
	CbStruct      uint32
	DwFilterIndex uint32
	DwFilterTag   uint32
	FdwSupport    uint32
	Pwfltr        *WAVEFILTER
	Cbwfltr       uint32
	SzFilter      []CHAR
}

type ACMFILTERDETAILSW struct {
	CbStruct      uint32
	DwFilterIndex uint32
	DwFilterTag   uint32
	FdwSupport    uint32
	Pwfltr        *WAVEFILTER
	Cbwfltr       uint32
	SzFilter      []uint16
}

type ACMFILTERENUMCBA uintptr

type ACMFILTERENUMCBW uintptr

type ACMFILTERCHOOSEA struct {
	CbStruct        uint32
	FdwStyle        uint32
	HwndOwner       HWND
	Pwfltr          *WAVEFILTER
	Cbwfltr         uint32
	PszTitle        *PSTRElement
	SzFilterTag     []CHAR
	SzFilter        []CHAR
	PszName         *PSTRElement
	CchName         uint32
	FdwEnum         uint32
	PwfltrEnum      *WAVEFILTER
	HInstance       HINSTANCE
	PszTemplateName *PSTRElement
	LCustData       LPARAM
	PfnHook         ACMFILTERCHOOSEHOOKPROCA
}

type ACMFILTERCHOOSEW struct {
	CbStruct        uint32
	FdwStyle        uint32
	HwndOwner       HWND
	Pwfltr          *WAVEFILTER
	Cbwfltr         uint32
	PszTitle        *PWSTRElement
	SzFilterTag     []uint16
	SzFilter        []uint16
	PszName         *PWSTRElement
	CchName         uint32
	FdwEnum         uint32
	PwfltrEnum      *WAVEFILTER
	HInstance       HINSTANCE
	PszTemplateName *PWSTRElement
	LCustData       LPARAM
	PfnHook         ACMFILTERCHOOSEHOOKPROCW
}

type ACMSTREAMHEADER struct {
	CbStruct         uint32
	FdwStatus        uint32
	DwUser           uintptr
	PbSrc            *uint8
	CbSrcLength      uint32
	CbSrcLengthUsed  uint32
	DwSrcUser        uintptr
	PbDst            *uint8
	CbDstLength      uint32
	CbDstLengthUsed  uint32
	DwDstUser        uintptr
	DwReservedDriver []uint32
}

type MIXERLINE_COMPONENTTYPE uint32

const (
	MIXERLINE_COMPONENTTYPE_DST_DIGITAL     MIXERLINE_COMPONENTTYPE = 0x1
	MIXERLINE_COMPONENTTYPE_DST_HEADPHONES  MIXERLINE_COMPONENTTYPE = 0x5
	MIXERLINE_COMPONENTTYPE_DST_LINE        MIXERLINE_COMPONENTTYPE = 0x2
	MIXERLINE_COMPONENTTYPE_DST_MONITOR     MIXERLINE_COMPONENTTYPE = 0x3
	MIXERLINE_COMPONENTTYPE_DST_SPEAKERS    MIXERLINE_COMPONENTTYPE = 0x4
	MIXERLINE_COMPONENTTYPE_DST_TELEPHONE   MIXERLINE_COMPONENTTYPE = 0x6
	MIXERLINE_COMPONENTTYPE_DST_UNDEFINED   MIXERLINE_COMPONENTTYPE = 0x0
	MIXERLINE_COMPONENTTYPE_DST_VOICEIN     MIXERLINE_COMPONENTTYPE = 0x8
	MIXERLINE_COMPONENTTYPE_DST_WAVEIN      MIXERLINE_COMPONENTTYPE = 0x7
	MIXERLINE_COMPONENTTYPE_SRC_ANALOG      MIXERLINE_COMPONENTTYPE = 0x100a
	MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY   MIXERLINE_COMPONENTTYPE = 0x1009
	MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC MIXERLINE_COMPONENTTYPE = 0x1005
	MIXERLINE_COMPONENTTYPE_SRC_DIGITAL     MIXERLINE_COMPONENTTYPE = 0x1001
	MIXERLINE_COMPONENTTYPE_SRC_LINE        MIXERLINE_COMPONENTTYPE = 0x1002
	MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE  MIXERLINE_COMPONENTTYPE = 0x1003
	MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER   MIXERLINE_COMPONENTTYPE = 0x1007
	MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER MIXERLINE_COMPONENTTYPE = 0x1004
	MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE   MIXERLINE_COMPONENTTYPE = 0x1006
	MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED   MIXERLINE_COMPONENTTYPE = 0x1000
	MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT     MIXERLINE_COMPONENTTYPE = 0x1008
)

type HICON uintptr

type HWND uintptr

type CHAR uint8

type MIXERCONTROLA struct {
	CbStruct       uint32
	DwControlID    uint32
	DwControlType  uint32
	FdwControl     uint32
	CMultipleItems uint32
	SzShortName    []CHAR
	SzName         []CHAR
	LMinimum       int32
	LMaximum       int32
	CSteps         uint32
}

type MIXERCONTROLW struct {
	CbStruct       uint32
	DwControlID    uint32
	DwControlType  uint32
	FdwControl     uint32
	CMultipleItems uint32
	SzShortName    []uint16
	SzName         []uint16
	LMinimum       int32
	LMaximum       int32
	CSteps         uint32
}

type ACMFORMATCHOOSEHOOKPROCA uintptr

type ACMFORMATCHOOSEHOOKPROCW uintptr

type ACMFILTERCHOOSEHOOKPROCA uintptr

type ACMFILTERCHOOSEHOOKPROCW uintptr

// This is the end of the file.
